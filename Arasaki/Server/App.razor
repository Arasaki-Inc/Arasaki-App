<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <NavigationBar />
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
<ContextualBackground />
<NavigationBar />

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject UIState UIState

@code
{
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Uri navURI = new(NavigationManager.Uri);
        UIState.PageContexts = new()
            {
                new PageContext
                {
                    PublicName = "Arasaki UEFI",
                    PrivateName = "uefi",
                    RelativeURLs = new() { "/uefi", "/" },
                    BackgroundRelativeURL = "/img/server/backgrounds/uefi.svg"
                },
                new PageContext
                {
                    PublicName = "App Settings",
                    PrivateName = "settings",
                    RelativeURLs = new() { "/uefi/settings" },
                    BackgroundRelativeURL = "/img/server/backgrounds/settings.svg"
                },
                new PageContext
                {
                    PublicName = "Permissions",
                    PrivateName = "permissions",
                    RelativeURLs = new() { "/uefi/perms" },
                    BackgroundRelativeURL = "/img/server/backgrounds/permissions.svg"
                },
                new PageContext
                {
                    PublicName = "Storage",
                    PrivateName = "storage",
                    RelativeURLs = new() { "/uefi/storage" },
                    BackgroundRelativeURL = "/img/server/backgrounds/storage.svg"
                },
                new PageContext
                {
                    PublicName = "Arasaki Updater",
                    PrivateName = "updater",
                    RelativeURLs = new() { "/uefi/updater" },
                    BackgroundRelativeURL = "/img/server/backgrounds/updater.svg"
                },
                new PageContext
                {
                    PublicName = "About",
                    PrivateName = "about",
                    RelativeURLs = new() { "/uefi/about" },
                    BackgroundRelativeURL = "/img/server/backgrounds/about.svg"
                }
            };
        try
        {
            if (navURI.AbsolutePath == "/" || !UIState.PageContexts.Any(o => o.RelativeURLs.Contains(navURI.AbsolutePath))) 
                UIState.CurrentPageContext = UIState.PageContexts.First(x => x.PrivateName == "uefi");
            else
            {
                PageContext newConext = UIState.PageContexts.First(x => x.RelativeURLs.Contains(navURI.AbsolutePath));
                if (!UIState.CurrentPageContext.Equals(newConext)) UIState.CurrentPageContext = newConext;
            }
        }
        catch { NavigationManager.NavigateTo("/uefi"); }
        OnFullPageRefresh += RefreshPage;
    }

    private static event Action OnFullPageRefresh;

    [JSInvokable("refreshPage")]
    public static Task RefreshFromWASM()
    {
        OnFullPageRefresh?.Invoke();
        return Task.CompletedTask;
    }

    private void RefreshPage()
    {
        InvokeAsync(StateHasChanged);
    }
}