"use strict";self.importScripts("./service-worker-assets.js");self.addEventListener("install",(event=>event.waitUntil(onInstall(event))));self.addEventListener("activate",(event=>event.waitUntil(onActivate(event))));self.addEventListener("fetch",(event=>event.respondWith(onFetch(event))));const cacheNamePrefix="offline-cache-";const cacheName=`${cacheNamePrefix}${self.assetsManifest.version}`;const offlineAssetsInclude=[/\.dll$/,/\.wasm/,/\.blat$/,/\.dat$/,/\.html/,/\.js$/,/\.css$/,/\.json$/,/\.woff2$/,/\.aac$/,/\.webp$/,/\.mp4$/];const offlineAssetsExclude=[/^service-worker\.js$/];async function onInstall(event){const assetsRequests=self.assetsManifest.assets.filter((asset=>offlineAssetsInclude.some((pattern=>pattern.test(asset.url))))).filter((asset=>!offlineAssetsExclude.some((pattern=>pattern.test(asset.url))))).map((asset=>new Request(asset.url,{integrity:asset.hash,cache:"no-cache"})));await caches.open(cacheName).then((cache=>cache.addAll(assetsRequests)))}async function onActivate(event){const cacheKeys=await caches.keys();await Promise.all(cacheKeys.filter((key=>key.startsWith(cacheNamePrefix)&&key!==cacheName)).map((key=>caches.delete(key))))}async function onFetch(event){let cachedResponse;if(event.request.method==="GET"){const shouldServeIndexHtml=event.request.mode==="navigate";const request=shouldServeIndexHtml?"index.html":event.request;const cache=await caches.open(cacheName);cachedResponse=await cache.match(request)}return cachedResponse||fetch(event.request)}